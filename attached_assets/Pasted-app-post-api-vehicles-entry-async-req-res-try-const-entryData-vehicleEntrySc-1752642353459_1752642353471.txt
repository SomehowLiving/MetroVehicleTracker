app.post("/api/vehicles/entry", async (req, res) => {
  try {
    const entryData = vehicleEntrySchema.parse(req.body);
    const { storeId = 1, operatorId = 1 } = req.body;

    const existingVehicle = await storage.getVehicleByNumber(
      entryData.vehicleNumber,
    );
    if (existingVehicle) {
      const activeCheckins = await storage.getActiveCheckins();
      const duplicateCheckin = activeCheckins.find(
        (c) => c.vehicleNumber === entryData.vehicleNumber,
      );

      if (duplicateCheckin) {
        return res
          .status(400)
          .json({ message: "Vehicle is already checked in" });
      }
    }

    const vendor = await storage.getVendorById(entryData.vendorId);
    const store = await storage.getStoreById(storeId);

    if (!vendor || !store) {
      return res.status(400).json({ message: "Invalid vendor or store" });
    }

    let vehicle = existingVehicle;
    if (!vehicle) {
      vehicle = await storage.createVehicle({
        vehicleNumber: entryData.vehicleNumber,
        vendorId: entryData.vendorId,
        driverName: entryData.driverName,
        driverPhotoUrl: entryData.driverPhotoUrl,
      });
    } else if (entryData.driverPhotoUrl) {
      vehicle = await storage.updateVehicle(vehicle.id, {
        driverPhotoUrl: entryData.driverPhotoUrl,
      });
    }

    const checkin = await storage.createCheckin({
      vehicleId: vehicle.id,
      storeId: storeId,
      vendorId: entryData.vendorId,
      operatorId: operatorId,
      purpose: "Delivery",
      openingKm: entryData.openingKm,
      openingKmTimestamp: entryData.openingKm ? new Date() : null,
      closingKm: null,
      closingKmTimestamp: null,
      status: "In",
      vehicleNumber: entryData.vehicleNumber,
      vendorName: vendor.name,
      driverName: entryData.driverName,
      storeName: store.name,
    });

    if (entryData.manpower) {
      for (const person of entryData.manpower) {
        await storage.createManpower({
          checkinId: checkin.id,
          name: person.name,
          idNumber: person.role,
          photoUrl: person.photoUrl,
        });
      }
    }

    wsService.notifyVehicleEntry({
      ...checkin,
      manpower: entryData.manpower || [],
    });

    res.json(checkin);
  } catch (error) {
    console.error("Vehicle entry error:", error);
    res.status(400).json({ message: "Error creating vehicle entry" });
  }
});

app.post("/api/vehicles/exit", async (req, res) => {
  try {
    const { checkinId, closingKm } = req.body;

    const checkin = await storage.getCheckinById(checkinId);
    if (!checkin) {
      return res.status(404).json({ message: "Checkin not found" });
    }

    if (checkin.status !== "In") {
      return res.status(400).json({ message: "Vehicle is not checked in" });
    }

    const updatedCheckin = await storage.updateCheckin(checkinId, {
      closingKm: closingKm,
      closingKmTimestamp: new Date(),
      status: "Out",
    });

    wsService.notifyVehicleExit(updatedCheckin);

    res.json(updatedCheckin);
  } catch (error) {
    console.error("Vehicle exit error:", error);
    res.status(400).json({ message: "Error processing vehicle exit" });
  }
});
